{"version":3,"sources":["jquery.matchHeight.js","main.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","_previousResizeWidth","_updateTimeout","_parse","value","parseFloat","_rows","elements","tolerance","$elements","lastTop","rows","each","$that","this","top","offset","css","lastRow","length","push","Math","floor","abs","add","_parseOptions","options","opts","byRow","property","target","remove","extend","matchHeight","fn","that","_groups","key","group","not","_apply","version","_throttle","_maintainScroll","_beforeUpdate","_afterUpdate","scrollTop","window","htmlHeight","outerHeight","$hiddenParents","parents","filter","data","attr","display","padding-top","padding-bottom","margin-top","margin-bottom","border-top-width","border-bottom-width","height","overflow","row","$row","targetHeight","style","verticalPadding","is","_applyDataApi","groups","$this","groupId","_update","event","throttle","type","windowWidth","width","setTimeout","on","paginationLoading","itemCount","loadNext","$elem","addClass","ajax","url","replace","done","$data","append","children","parseInt","history","replaceState","document","ready","scroll","last","e","preventDefault"],"mappings":"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","file":"main.js","sourcesContent":["/**\n* jquery-match-height 0.7.2 by @liabru\n* http://brm.io/jquery-match-height/\n* License: MIT\n*/\n\n;(function(factory) { // eslint-disable-line no-extra-semi\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Global\n        factory(jQuery);\n    }\n})(function($) {\n    /*\n    *  internal\n    */\n\n    var _previousResizeWidth = -1,\n        _updateTimeout = -1;\n\n    /*\n    *  _parse\n    *  value parse utility function\n    */\n\n    var _parse = function(value) {\n        // parse value and convert NaN to 0\n        return parseFloat(value) || 0;\n    };\n\n    /*\n    *  _rows\n    *  utility function returns array of jQuery selections representing each row\n    *  (as displayed after float wrapping applied by browser)\n    */\n\n    var _rows = function(elements) {\n        var tolerance = 1,\n            $elements = $(elements),\n            lastTop = null,\n            rows = [];\n\n        // group elements by their top position\n        $elements.each(function(){\n            var $that = $(this),\n                top = $that.offset().top - _parse($that.css('margin-top')),\n                lastRow = rows.length > 0 ? rows[rows.length - 1] : null;\n\n            if (lastRow === null) {\n                // first item on the row, so just push it\n                rows.push($that);\n            } else {\n                // if the row top is the same, add to the row group\n                if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {\n                    rows[rows.length - 1] = lastRow.add($that);\n                } else {\n                    // otherwise start a new row group\n                    rows.push($that);\n                }\n            }\n\n            // keep track of the last row top\n            lastTop = top;\n        });\n\n        return rows;\n    };\n\n    /*\n    *  _parseOptions\n    *  handle plugin options\n    */\n\n    var _parseOptions = function(options) {\n        var opts = {\n            byRow: true,\n            property: 'height',\n            target: null,\n            remove: false\n        };\n\n        if (typeof options === 'object') {\n            return $.extend(opts, options);\n        }\n\n        if (typeof options === 'boolean') {\n            opts.byRow = options;\n        } else if (options === 'remove') {\n            opts.remove = true;\n        }\n\n        return opts;\n    };\n\n    /*\n    *  matchHeight\n    *  plugin definition\n    */\n\n    var matchHeight = $.fn.matchHeight = function(options) {\n        var opts = _parseOptions(options);\n\n        // handle remove\n        if (opts.remove) {\n            var that = this;\n\n            // remove fixed height from all selected elements\n            this.css(opts.property, '');\n\n            // remove selected elements from all groups\n            $.each(matchHeight._groups, function(key, group) {\n                group.elements = group.elements.not(that);\n            });\n\n            // TODO: cleanup empty groups\n\n            return this;\n        }\n\n        if (this.length <= 1 && !opts.target) {\n            return this;\n        }\n\n        // keep track of this group so we can re-apply later on load and resize events\n        matchHeight._groups.push({\n            elements: this,\n            options: opts\n        });\n\n        // match each element's height to the tallest element in the selection\n        matchHeight._apply(this, opts);\n\n        return this;\n    };\n\n    /*\n    *  plugin global options\n    */\n\n    matchHeight.version = '0.7.2';\n    matchHeight._groups = [];\n    matchHeight._throttle = 80;\n    matchHeight._maintainScroll = false;\n    matchHeight._beforeUpdate = null;\n    matchHeight._afterUpdate = null;\n    matchHeight._rows = _rows;\n    matchHeight._parse = _parse;\n    matchHeight._parseOptions = _parseOptions;\n\n    /*\n    *  matchHeight._apply\n    *  apply matchHeight to given elements\n    */\n\n    matchHeight._apply = function(elements, options) {\n        var opts = _parseOptions(options),\n            $elements = $(elements),\n            rows = [$elements];\n\n        // take note of scroll position\n        var scrollTop = $(window).scrollTop(),\n            htmlHeight = $('html').outerHeight(true);\n\n        // get hidden parents\n        var $hiddenParents = $elements.parents().filter(':hidden');\n\n        // cache the original inline style\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.data('style-cache', $that.attr('style'));\n        });\n\n        // temporarily must force hidden parents visible\n        $hiddenParents.css('display', 'block');\n\n        // get rows if using byRow, otherwise assume one row\n        if (opts.byRow && !opts.target) {\n\n            // must first force an arbitrary equal height so floating elements break evenly\n            $elements.each(function() {\n                var $that = $(this),\n                    display = $that.css('display');\n\n                // temporarily force a usable display value\n                if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                    display = 'block';\n                }\n\n                // cache the original inline style\n                $that.data('style-cache', $that.attr('style'));\n\n                $that.css({\n                    'display': display,\n                    'padding-top': '0',\n                    'padding-bottom': '0',\n                    'margin-top': '0',\n                    'margin-bottom': '0',\n                    'border-top-width': '0',\n                    'border-bottom-width': '0',\n                    'height': '100px',\n                    'overflow': 'hidden'\n                });\n            });\n\n            // get the array of rows (based on element top position)\n            rows = _rows($elements);\n\n            // revert original inline styles\n            $elements.each(function() {\n                var $that = $(this);\n                $that.attr('style', $that.data('style-cache') || '');\n            });\n        }\n\n        $.each(rows, function(key, row) {\n            var $row = $(row),\n                targetHeight = 0;\n\n            if (!opts.target) {\n                // skip apply to rows with only one item\n                if (opts.byRow && $row.length <= 1) {\n                    $row.css(opts.property, '');\n                    return;\n                }\n\n                // iterate the row and find the max height\n                $row.each(function(){\n                    var $that = $(this),\n                        style = $that.attr('style'),\n                        display = $that.css('display');\n\n                    // temporarily force a usable display value\n                    if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                        display = 'block';\n                    }\n\n                    // ensure we get the correct actual height (and not a previously set height value)\n                    var css = { 'display': display };\n                    css[opts.property] = '';\n                    $that.css(css);\n\n                    // find the max height (including padding, but not margin)\n                    if ($that.outerHeight(false) > targetHeight) {\n                        targetHeight = $that.outerHeight(false);\n                    }\n\n                    // revert styles\n                    if (style) {\n                        $that.attr('style', style);\n                    } else {\n                        $that.css('display', '');\n                    }\n                });\n            } else {\n                // if target set, use the height of the target element\n                targetHeight = opts.target.outerHeight(false);\n            }\n\n            // iterate the row and apply the height to all elements\n            $row.each(function(){\n                var $that = $(this),\n                    verticalPadding = 0;\n\n                // don't apply to a target\n                if (opts.target && $that.is(opts.target)) {\n                    return;\n                }\n\n                // handle padding and border correctly (required when not using border-box)\n                if ($that.css('box-sizing') !== 'border-box') {\n                    verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));\n                    verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));\n                }\n\n                // set the height (accounting for padding and border)\n                $that.css(opts.property, (targetHeight - verticalPadding) + 'px');\n            });\n        });\n\n        // revert hidden parents\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.attr('style', $that.data('style-cache') || null);\n        });\n\n        // restore scroll position if enabled\n        if (matchHeight._maintainScroll) {\n            $(window).scrollTop((scrollTop / htmlHeight) * $('html').outerHeight(true));\n        }\n\n        return this;\n    };\n\n    /*\n    *  matchHeight._applyDataApi\n    *  applies matchHeight to all elements with a data-match-height attribute\n    */\n\n    matchHeight._applyDataApi = function() {\n        var groups = {};\n\n        // generate groups by their groupId set by elements using data-match-height\n        $('[data-match-height], [data-mh]').each(function() {\n            var $this = $(this),\n                groupId = $this.attr('data-mh') || $this.attr('data-match-height');\n\n            if (groupId in groups) {\n                groups[groupId] = groups[groupId].add($this);\n            } else {\n                groups[groupId] = $this;\n            }\n        });\n\n        // apply matchHeight to each group\n        $.each(groups, function() {\n            this.matchHeight(true);\n        });\n    };\n\n    /*\n    *  matchHeight._update\n    *  updates matchHeight on all current groups with their correct options\n    */\n\n    var _update = function(event) {\n        if (matchHeight._beforeUpdate) {\n            matchHeight._beforeUpdate(event, matchHeight._groups);\n        }\n\n        $.each(matchHeight._groups, function() {\n            matchHeight._apply(this.elements, this.options);\n        });\n\n        if (matchHeight._afterUpdate) {\n            matchHeight._afterUpdate(event, matchHeight._groups);\n        }\n    };\n\n    matchHeight._update = function(throttle, event) {\n        // prevent update if fired from a resize event\n        // where the viewport width hasn't actually changed\n        // fixes an event looping bug in IE8\n        if (event && event.type === 'resize') {\n            var windowWidth = $(window).width();\n            if (windowWidth === _previousResizeWidth) {\n                return;\n            }\n            _previousResizeWidth = windowWidth;\n        }\n\n        // throttle updates\n        if (!throttle) {\n            _update(event);\n        } else if (_updateTimeout === -1) {\n            _updateTimeout = setTimeout(function() {\n                _update(event);\n                _updateTimeout = -1;\n            }, matchHeight._throttle);\n        }\n    };\n\n    /*\n    *  bind events\n    */\n\n    // apply on DOM ready event\n    $(matchHeight._applyDataApi);\n\n    // use on or bind where supported\n    var on = $.fn.on ? 'on' : 'bind';\n\n    // update heights on load and resize events\n    $(window)[on]('load', function(event) {\n        matchHeight._update(false, event);\n    });\n\n    // throttled update heights on resize events\n    $(window)[on]('resize orientationchange', function(event) {\n        matchHeight._update(true, event);\n    });\n\n});\n","(function ($) {\n    var paginationLoading = false;\n    window.itemCount = 0;\n\n    var loadNext = function($elem) {\n        paginationLoading = true;\n        $elem.addClass('pagination__link--loading');\n        $.ajax({ url: $elem.attr('href').replace(/([?&])items=\\d*/, '$1items=0') }).done(function(data) {\n            var $data = $(\"#main\", $(data));\n            $(\"#main .pagination\").remove();\n            $(\"#main\").append($data.children());\n            itemCount += parseInt($data.attr('data-items'));\n            paginationLoading = false;\n            history.replaceState({}, \"\", \"?items=\" + itemCount);\n        });\n    };\n\n    $(document).ready(function () {\n        itemCount += parseInt($(\"#main\").attr('data-items'));\n\n        $(window).scroll(function() {\n            if($('.pagination__link').length > 0 && $(window).scrollTop() >= ($('.pagination__link').last().offset().top - $(window).height() - $(window).height() / 3) && !paginationLoading) {\n                loadNext($('.pagination__link').last());\n            }\n        });\n\n        $(document).on(\"click\", \".pagination__link\", function(e) {\n            e.preventDefault();\n            loadNext($(this));\n        });\n\n        if ($(\".page-grid\").length) {\n          $(\".page-grid > li\").matchHeight();\n        }\n    });\n})(jQuery);\n"]}